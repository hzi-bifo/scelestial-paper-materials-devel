# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hp8hQ7_epc4SQaKPPUDH1CKreJY79kSd
"""

from PIL import Image
import numpy as np
import sys

gray = [170, 170, 170]
white = [255, 255, 255]
blue = [22, 22, 178]
black = [0, 0, 0]
colors = {'G': gray, 'W': white, 'B': blue, 'L': black}

def getcolor(p, i, j):
        
        #dist = {n: sum([abs(c[k] - p[i,j,k]) for k in range(p.shape[2])]) for n, c in colors.items()}
        if p[i,j,2] > 2 * p[i,j,0] and p[i,j,2] > 2 * p[i,j,0]:
                r = 'B'
        elif all([p[i,j,k] > 200 for k in range(3)]):
                r = 'W'
        elif all([p[i,j,k] < 150 for k in range(3)]):
                r = 'L'
        else:
                r = 'G'
        return r, p[i,j]

        #r, g, b = p[i,j,0], p[i,j,1], p[i,j,2]
        #isw = all([230 <= p[i,j,k] <=255 for k in range(p.shape[2])])  
        #if isw: return 'www/www/www'
        #return '/'.join([str(p[i,j,k]) for k in range(p.shape[2])])



# colo, cold = [], []
# p = np.array(im)
# for i in range(p.shape[0]):
#         colo.append([])
#         cold.append([])
#         for j in range(p.shape[1]):
#                 c, d = getcolor(p, i, j)
#                 cold[i].append(d)
#                 colo[i].append(c)
#                 #print(col(p, i, j), end=" ")
#         #print()
# for i in range(p.shape[0]):
#         for j in range(2, p.shape[1]-2):
#                 if colo[i][j] == 'G' and (colo[i][j+1] == 'B' or colo[i][j+2] == 'B') and (colo[i][j-1] == 'B' or colo[i][j-2] == 'B'):
#                         colo[i][j] = 'W'

# uniq_column = []
# imp_col_all = []
# for j in range(p.shape[1]):
#         colu = 0
#         for i in range(p.shape[0]):
#                 if colo[i][j] == 'W':
#                         colu += 1
#         if colu / p.shape[0] > 0.5:
#                 colu = 'W'
#         else:
#                 colu = '*'
#         if colu == '*':
#                 imp_col_all.append(j)
#         uniq_column.append(colu)

# def all_2_range(a):
# 	imp_col = []
# 	last_imp_col = -100
# 	for i in a:
# 		if i > last_imp_col + 1:
# 			imp_col.append([i, i+1])
# 		else:
# 			imp_col[-1][1] = i+1
# 		last_imp_col = i
# 	return imp_col

# imp_col = all_2_range(imp_col_all)
	

# uniq_row = []
# imp_row_all = []
# for i in range(p.shape[0]):
#         colu = 0
#         for j in range(p.shape[1]):
#                 if colo[i][j] == 'W':
#                         colu += 1
#         if colu / p.shape[1] > 0.8:
#                 colu = 'W'
#         else:
#                 colu = '*'
#         if colu == '*':
#                 imp_row_all.append(i)
#         uniq_row.append(colu)


# imp_row = all_2_range(imp_row_all)

# tab = []
# for row in imp_row:
# 	tab.append([])
# 	for col in imp_col:
# 		l = []
# 		for i in range(row[0], row[1]):
# 			for j in range(col[0], col[1]):
# 				l.append(colo[i][j])
# 		c = max(set(l), key = l.count)
# 		#print('{}:{} {} {}'.format(row, col, c, l))
# 		tab[-1].append(c)

# def col2scite(c):
# 	if c == 'W': return 3
# 	if c == 'B': return 1
# 	return 0

# # f=open('H1.txt', 'w')
# f = sys.stdout
# for r in tab:
# 	for c in r:
# 		print(col2scite(c), end=' ', file=f)
# 	print('', file=f)
# # f.close()



# def convert2scite(inFile, outFile, nrow, ncol):
im = Image.open(inFile)
imPixel = im.load()
p = np.array(im)

divider_columns = []
for i in range(im.size[0]):
  w_cnt = 0
  for j in range(im.size[1]):
    c, d = getcolor(p, j, i)
    if c == 'W': w_cnt += 1
  # if w_cnt > im.size[1] * 2 / 3:
  if w_cnt > im.size[1] * 2 / 3 or (len(divider_columns) > 0 and i - divider_columns[-1] > 3):
    divider_columns.append(i)
divider_columns = set(divider_columns)

divider_rows = []
for j in range(im.size[1]):
  w_cnt = 0
  for i in range(im.size[0]):
    c, d = getcolor(p, j, i)
    if c == 'W': w_cnt += 1
  if w_cnt > im.size[0] * 3 / 4:
    divider_rows.append(j)
divider_rows = set(divider_rows)


img = Image.new( 'RGB', im.size, "black") # Create a new black image
imgPixel = img.load()
cellIndices = [[[] for i in range(nrow)] for j in range(ncol)]
cellColor = [['W' for i in range(nrow)] for j in range(ncol)]

free_count_col, free_active_col = 0, False
for i in range(im.size[0]):
  if i in divider_columns: 
    free_active_col = False
  else:
    if free_active_col == False:
      free_count_col += 1
    free_active_col = True
  free_count_row, free_active_row = 0, False
  for j in range(im.size[1]):
    if j in divider_rows: 
      free_active_row = False
    else:
      if free_active_row == False:
        free_count_row += 1
        # print('n r={} lr={}'.format(free_count_row, free_active_row), file=sys.stderr)
      free_active_row = True
    c, d = getcolor(p, j, i)
    # Showing dividers and cells and cell numbers
    imgPixel[i,j] = tuple(p[j,i]) if i not in divider_columns and j not in divider_rows else (255,0, 0)
    # imgPixel[i,j] = tuple(colors[c]) if i not in divider_columns and j not in divider_rows else (255,0, 0)
    # if not free_active_col or not free_active_row:
    #   imgPixel[i,j] = (255, 255, 255)
    # elif free_count_col % 2 == 0:
    #   imgPixel[i,j] = (255, 0, 0)
    # else:
    #   imgPixel[i,j] = (0, 255, 0)

    if free_active_row and free_active_col:
      cellIndices[free_count_col-1][free_count_row-1].append((i, j))
    # out[j, i] = 

print(free_count_col, free_count_row)
for fi in range(free_count_col):
  for fj in range(free_count_row):
    cls = [getcolor(p, j, i)[0] for (i,j) in cellIndices[fi][fj]]
    if 'B' in cls:
      cellColor[fi][fj] = 'B'
    elif 'L' in cls:
      cellColor[fi][fj] = 'L'
    elif 'G' in cls:
      cellColor[fi][fj] = 'G'
    else:
      cellColor[fi][fj] = 'W'
    i_mx = max([i for (i, j) in cellIndices[fi][fj]])
    for (i, j) in cellIndices[fi][fj]:
      tt = tuple(colors[cellColor[fi][fj]])
      tt = (tt[0], tt[1] + 100, tt[2])
      imgPixel[i_mx+1, j] = tt
    

colorToScite = {'W': 3, 'L': 3, 'B': 1, 'G': 0}
f=open(outFile, 'w')
for i in range(nrow):
  for j in range(ncol):
    print(colorToScite[cellColor[j][i]], end=' ', file=f)
  print('', file=f)
f.close()

# for i in range(im.size[0]):
#   for j in range(im.size[1]):
#     c, d = getcolor(p, j, i)
#     # imgPixel[i,j] = imPixel[i,j]
#     imgPixel[i,j] = tuple(colors[c]) if i not in divider_columns and j not in divider_rows else (255,0, 0)

img.save("test.bmp")

inFile, outFile = "Luang-2.bmp", 'Luang-2.txt'
ncol, nrow = 182, 36

inFile, outFile = "Luang-1.bmp", 'Luang-1.txt'
ncol, nrow = 178, 16