#!/usr/bin/env python -W ignore::DeprecationWarning
import warnings

def fxn():
    warnings.warn("deprecated", DeprecationWarning)

with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    fxn()

#=======================================================
# BitPhylogeny
# Author : Ke Yuan
#=======================================================
import argparse
from bitphylogeny.run import run_wrapper, post_process_wrapper

parser = argparse.ArgumentParser(prog='BitPhylogeny')

parser.add_argument('--version', action='version', version='BitPhylogeny-0.1')

subparsers = parser.add_subparsers()

#--------------------------------------------------------
analyse_parser = subparsers.add_parser('analyse', 
                                       help='''Start a new BitPhylogeny analysis.''')

analyse_parser.add_argument('fin',
                            help='Path to data file')

analyse_parser.add_argument('fout',
                            help='Path to results dir')

analyse_parser.add_argument('-true_label', action='store_true', default=False, 
                            help='Data file contains true labels')

analyse_parser.add_argument('-n', default=100, type=int,
                            help='''Number of samples.''')

analyse_parser.add_argument('-b', default=1, type=int,
                            help='''Number of burnin samples.''')

analyse_parser.add_argument('-t', default=1, type=int,
                            help='''The thinning window.''')

analyse_parser.add_argument('-mode', choices=["methylation", "mutation"],
                            default = "methylation",
                            help='Data types, choose from methylation and mutation.')

analyse_parser.add_argument('-seed', default=1234, type=int,
                            help="Rand seed. Default is 1234")

analyse_parser.add_argument('-row_names', action='store_true', default=False,
                            help="The first column is row names")

analyse_parser.add_argument('-collect_all_trees', action='store_true', default=False,
                            help="Store all graphml trees")

analyse_parser.set_defaults(func=run_wrapper)

#-------------------------------------------------------------------
post_process_parser = subparsers.add_parser('post_process', 
                                       help='''Post process BitPhylogeny results.''')
post_process_parser.add_argument('fout',
                            help='Path to results dir')
post_process_parser.add_argument('fin',
                            help='Path to data file')
post_process_parser.set_defaults(func=post_process_wrapper)
#---------------------------------------------------------------------
args = parser.parse_args()

args.func(args)
